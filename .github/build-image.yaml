name: Build Container Image

on:
  workflow_call:
    inputs:
      tagTypes:
        required: false
        type: string
        default: |
          type=sha
      publish-time:
        required: false
        type: boolean
        default: false
    outputs:
      release:
        description: Release tag
        value: ${{ jobs.build.outputs.release }}
      # release-ui-test:
      #   description: Release tag
      #   value: ${{ jobs.test.outputs.release }}

permissions:
  packages: write
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and Publish App
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 #v5.7.0
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            ${{ inputs.tagTypes }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 #v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 #v3.11.1

      - name: Build and push Docker images
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: build
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache,mode=max

  # test:
  #   name: Build and Publish UI Test
  #   runs-on: ubuntu-latest
    # outputs:
    #   release: ${{ steps.meta.outputs.tags }}
    # steps:
    #   - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

    #   - name: Log in to the Container registry
    #     uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #v3.4.0
    #     with:
    #       registry: ${{ env.REGISTRY }}
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Extract metadata (tags, labels) for Docker
    #     id: meta
    #     uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 #v5.7.0
    #     with:
    #       images: |
    #         ${{ env.REGISTRY }}/${{ github.repository }}-ui-test
    #       # when opened on pull request, no inputs are provided. when empty the
    #       # defaults are used which produces pr-* as the tag to the image using
    #       # the below information.
    #       #   type=schedule,pattern=nightly,enable=true,priority=1000
    #       #   type=ref,event=branch,enable=true,priority=600
    #       #   type=ref,event=tag,enable=true,priority=600
    #       #   type=ref,event=pr,prefix=pr-,enable=true,priority=600
    #       tags: |
    #         ${{ inputs.tagTypes }}

    #     # adding this step to support multi-arch images
    #   - name: Set up QEMU
    #     uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 #v3.6.0

    #   - name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 #v3.11.1

    #   - name: Build and push Docker images
    #     uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
    #     id: test
    #     with:
    #       context: .
    #       file: Dockerfile.ui-test
    #       push: true
    #       tags: ${{ steps.meta.outputs.tags }}
    #       labels: ${{ steps.meta.outputs.labels }}
    #       cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache-ui-test
    #       cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}:buildcache-ui-test,mode=max

  # snyk:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: inputs.publish-time == false
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 #v3.4.0
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Pull Docker image with specific platform
  #       run: docker pull --platform linux/amd64 ${{ needs.build.outputs.release }}

  #     - name: Run Snyk to check for vulnerabilities in Docker image
  #       uses: snyk/actions/docker@28606799782bc8e809f4076e9f8293bc4212d05e
  #       continue-on-error: true
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         image: ${{ needs.build.outputs.release }}
  #         args: --file=Dockerfile --platform=linux/amd64

      # - name: Fix SARIF securitySeverity fields
      #   run: |
      #     jq '(.runs[].tool.driver.rules[]?.properties.securitySeverity) |= if . == null then 5.0 else . end' snyk.sarif > fixed.sarif
      #
      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@86b04fb0e47484f7282357688f21d5d0e32175fe
      #   if: github.ref == 'refs/heads/main'
      #   continue-on-error: true
      #   with:
      #     sarif_file: fixed.sarif
      #     category: docker code scanning
      #