name: Main

on:
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  id-token: write
  packages: write
  contents: write
  pull-requests: write
  security-events: write

jobs:
  # check-manifests:
  #   uses: ./.github/workflows/check-manifests.yaml
  #   secrets: inherit

  build-python:
    uses: ./.github/workflows/build-python.yaml
    secrets: inherit

  build-image:
    needs: build-python
    uses: ./.github/workflows/build-image.yaml
    with:
      tagTypes: |
        type=sha
    secrets: inherit

  # integration-tests:
  #   uses: ./.github/workflows/integration-tests.yaml
  #   secrets: inherit

  # ui-tests:
  #   needs: build-image
  #   uses: ./.github/workflows/ui-tests.yaml
  #   with:
  #     ui-test-image: |
  #       ${{ needs.build-image.outputs.release-ui-test }}
  #     app-image: |
  #       ${{ needs.build-image.outputs.release }}
  #   secrets: inherit

  # security:
  #   uses: ./.github/workflows/security.yaml
  #   secrets: inherit

  release:
    runs-on: ubuntu-latest
    # needs: [build-image, security, integration-tests, ui-tests]
    steps:
      # - name: Generate STS Token
      #   id: octo-sts
      #   uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
      #   with:
      #     scope: liatrio/delivery-reporter
      #     identity: release

      # - name: Use the Token
      #   env:
      #     GH_TOKEN: ${{ steps.octo-sts.outputs.token }}
      #   run: |
      #     git config --global url."https://git:${{ steps.octo-sts.outputs.token }}@github.com".insteadOf https://github.com
      #     git config --global user.name '${{ github.actor }}'
      #     git config --global user.email '${{ github.actor }}@users.noreply.github.com'

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ GITHUB_TOKEN }}
          persist-credentials: false

      # - name: Log in to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ steps.octo-sts.outputs.token }}

      # - name: get tag
      #   id: get_tag
      #   uses: mathieudutour/github-tag-action@v6.2
      #   with:
      #     dry_run: true
      #     github_token: ${{ steps.octo-sts.outputs.token }}
      #     default_bump: false

      # - name: Install Tools
      #   uses: alexellis/arkade-get@493cf9387f80dcbf8a85786c55e04de45c927a5c
      #   with:
      #     crane: v0.20.6

      # - name: Retag Artifacts
      #   if: steps.get_tag.outputs.new_tag != ''
      #   run: |
      #     crane auth login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
      #     crane tag ${{ needs.build-image.outputs.release }} ${{ steps.get_tag.outputs.new_tag }}

      # - name: Retag Artifacts
      #   if: steps.get_tag.outputs.new_tag != ''
      #   run: |
      #     crane auth login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
      #     crane tag ${{ needs.build-image.outputs.release-ui-test }} ${{ steps.get_tag.outputs.new_tag }}

      # - name: set image version
      #   if: steps.get_tag.outputs.new_tag != ''
      #   run: |
      #     (
      #         cd manifests/base
      #         kustomize edit set image ghcr.io/iturgut/F1Picks:${{steps.get_tag.outputs.new_tag}}
      #         cd ../..
      #     )

      # - name: Configure Git and commit updated manifests
      #   run: |
      #     git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      #     git config --global user.name "${GITHUB_ACTOR}"
      #     git commit -am "fix: bump image to ${{steps.get_tag.outputs.new_tag}} in manifests [skip ci]"
      #     git push -f

      # - name: Create GitHub Release
      #   if: steps.get_tag.outputs.new_tag != ''
      #   env:
      #     GH_TOKEN: ${{ steps.octo-sts.outputs.token }}
      #     TAG: ${{ steps.get_tag.outputs.new_tag }}
      #   run: |
      #     git tag -a "${TAG}" -m "release $TAG"
      #     gh release create "${TAG}" \
      #         --generate-notes \
      #         --target "$(git rev-parse HEAD)"