name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Lint commit messages for conventional commits (required for release-please)
  commitlint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional
          echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js
      
      - name: Lint commit messages
        run: npx commitlint --from HEAD~${{ github.event.pull_request.commits }} --to HEAD --verbose

  # Detect changes to determine which jobs to run
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'shared/**'
              - 'package.json'
              - '.github/workflows/**'
            backend:
              - 'backend/**'
              - '.github/workflows/**'
            shared:
              - 'shared/**'
              - '.github/workflows/**'

  # Frontend CI
  frontend-ci:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Install root dependencies
        run: npm ci
        working-directory: ./

      - name: Build shared package
        run: |
          cd ../shared
          npm ci
          npm run build

      - name: Install frontend dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test -- --passWithNoTests

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 1

  # Backend CI
  backend-ci:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15@sha256:c189d272e4fcdd1ac419adee675d30be3d389c22ee770d593f15819d22a68a0d
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: f1picks_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run Black (code formatting check)
        continue-on-error: true
        run: black --check .

      - name: Run isort (import sorting check)
        continue-on-error: true
        run: isort --check-only .

      - name: Run mypy (type checking)
        continue-on-error: true
        run: mypy . --ignore-missing-imports

      - name: Run flake8 (linting)
        continue-on-error: true
        run: flake8 . --max-line-length=88 --extend-ignore=E203,W503

      - name: Run tests
        continue-on-error: true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/f1picks_test
        run: pytest -v

      - name: Test FastAPI startup
        continue-on-error: true
        run: |
          python -c "from app.main import app; print('FastAPI app loads successfully')"

  # Shared package CI
  shared-ci:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.shared == 'true' }}
    defaults:
      run:
        working-directory: ./shared
    
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: shared/package.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript build
        run: npm run build

      - name: Upload shared build artifacts
        continue-on-error: true
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: shared-build
          path: shared/dist/
          retention-days: 1

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Run Trivy vulnerability scanner
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Validate release-please configuration
  validate-release-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Validate release-please config
        run: |
          if [ ! -f .release-please-config.json ]; then
            echo "❌ .release-please-config.json not found"
            exit 1
          fi
          
          if [ ! -f .release-please-manifest.json ]; then
            echo "❌ .release-please-manifest.json not found"
            exit 1
          fi
          
          echo "✅ Release-please configuration files found"
          
          # Validate JSON syntax
          python -m json.tool .release-please-config.json > /dev/null
          python -m json.tool .release-please-manifest.json > /dev/null
          
          echo "✅ Release-please configuration files are valid JSON"
